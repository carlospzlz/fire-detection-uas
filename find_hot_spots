#!/usr/bin/env python

import argparse
from math import pow, cos, sin

import numpy as np
import cv2

import utils


__doc__ = 'Find hot spots on Galicia\'s IRDI map.'


WINDOW_NAME = 'Find Hot Spots'
MAX_SMOOTH_ITERATIONS = 1


def parse_args():
    """
    Parses map and cell size.
    """
    parser = argparse.ArgumentParser( description=__doc__)
    parser.add_argument('map', type=str, help='map file')
    parser.add_argument('cell_size', type=int, help='cell size')
    parser.add_argument(
        'risk', type=int, help='start risk [0 - 5]', choices=range(6))
    parser.add_argument(
        'separation', type=int, help='hot spots separation',
        choices=range(1, 11))
    return parser.parse_args()


def show_step(image, delay):
    utils.show_step(WINDOW_NAME, image, delay)


def select_hot_spots(cells, risk, separation):
    rows, columns = cells.shape
    hot_spots = np.full((rows, columns), False)
    for i in range(0, rows, separation):
        for j in range(0, columns, separation):
            if not cells[i][j] < risk:
                hot_spots[i][j] = True
    return hot_spots


def create_hot_spots_image(hot_spots, cell_size):
    rows, columns = hot_spots.shape
    img = np.zeros((rows * cell_size, columns * cell_size, 4), dtype=np.uint8)
    for i in range(rows):
        for j in range(columns):
            if hot_spots[i][j]:
                half_cell = cell_size / 2
                x = int(j * cell_size + half_cell)
                y = int(i * cell_size + half_cell)
                cv2.circle(img, (x, y), 2, (0, 0, 0, 255), -1)
    return img


def main():
    args = parse_args()

    print('Reading {} ...'.format(args.map))
    img = utils.read_image_with_alpha(args.map)
    utils.show_step(WINDOW_NAME, img, 0)

    print('Adding grid ...')
    height, width, _ = img.shape
    grid = utils.create_grid(height, width, args.cell_size)
    show_step(utils.blend(img, grid), 0)

    print('Averaging cells ...')
    avg_cells = utils.average_cells(img, args.cell_size)
    img = utils.create_rasterized_image(avg_cells, args.cell_size)
    height, width, _ = img.shape
    grid = utils.create_grid(height, width, args.cell_size)
    show_step(utils.blend(img, grid), 0)

    print('Classifying cells ...')
    risk_cells = utils.classify_cells(avg_cells)
    color_cells = utils.risk_cells_to_color_cells(risk_cells)
    img = utils.create_rasterized_image(color_cells, args.cell_size)
    show_step(utils.blend(img, grid), 0)

    print('Smoothing cells ...')
    for i in range(MAX_SMOOTH_ITERATIONS):
        print(' - iteration ', i)
        smoothed_risk_cells = utils.smooth(risk_cells, 1)
        color_cells = utils.risk_cells_to_color_cells(smoothed_risk_cells)
        img = utils.create_rasterized_image(color_cells, args.cell_size)
        show_step(utils.blend(img, grid), 1)
        if np.array_equal(smoothed_risk_cells, risk_cells):
            break
        risk_cells = smoothed_risk_cells
    show_step(utils.blend(img, grid), 0)

    print('Selecting hot spots ...')
    risk = utils.Risk(args.risk)
    hot_spots = select_hot_spots(risk_cells, risk, args.separation)
    hot_spots_img = create_hot_spots_image(hot_spots, args.cell_size)
    show_step(utils.blend(img, utils.blend(grid, hot_spots_img)), 0)

    print('Saving field of forces ...')
    #filename = 'field_of_forces.npy'
    #np.save(filename, forces)

    cv2.destroyAllWindows()


if __name__ == "__main__":
   main()
